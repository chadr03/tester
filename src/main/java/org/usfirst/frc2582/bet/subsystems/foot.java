// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2582.bet.subsystems;


import org.usfirst.frc2582.bet.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class foot extends Subsystem {
     
    private int targetPosition = 0;

       //Software Limits
    public static final int forwardLimit = 1000;
    public static final int reverseLimit = -2000;

   
  	/**
	 * Which PID slot to pull gains from. Starting 2018, you can choose from
	 * 0,1,2 or 3. Only the first two (0,1) are visible in web-based
	 * configuration.
	 */
	public static final int kSlotIdx = 0;

	/*
	 * Talon SRX/ Victor SPX will supported multiple (cascaded) PID loops. For
	 * now we just want the primary one.
	 */
	public static final int kPIDLoopIdx = 0;

	/*
	 * set to zero to skip waiting for confirmation, set to nonzero to wait and
	 * report to DS if action fails.
	 */
	public static final int kTimeoutMs = 30;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private TalonSRX foot1;
    private VictorSPX foot2;
    private boolean used;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public foot() {
        used = false; //this flag is used to decide if the leg needs to be pulled up
        
        foot1 = new TalonSRX(7);  //master
        foot2 = new VictorSPX(2);  //slave

        foot1.configFactoryDefault();     //this might be the order
        foot2.configFactoryDefault();
      
       
        foot2.follow(foot1);  // setting the slave to its master

        
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new ManualJumpCommand());
    
    
    
     //Sets up the encoder to be absolute version of the ctre mag encoder
     foot1.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);

        //Sets encoder phase this should be where the encoder counter goes up when the talon lights are green and down when lights are red
        //switch the boolan if it is counting backwards.  Motion magic will go haywire if this is not correct    
     foot1.setSensorPhase(true);
     foot1.setInverted(false);


     /* Set relevant frame periods to be at least as fast as periodic rate */
     foot1.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, kTimeoutMs);
     foot1.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, kTimeoutMs);

     /* set the peak and nominal outputs */
     foot1.configNominalOutputForward(0, kTimeoutMs);
     foot1.configNominalOutputReverse(0, kTimeoutMs);
     foot1.configPeakOutputForward(0.6, kTimeoutMs);
     foot1.configPeakOutputReverse(-0.6, kTimeoutMs);

     /* set closed loop gains in slot0 - see documentation */
     foot1.selectProfileSlot(kSlotIdx, kPIDLoopIdx);
     foot1.config_kF(0, 0.0, kTimeoutMs);
     foot1.config_kP(0, 4.0, kTimeoutMs);
     foot1.config_kI(0, 0, kTimeoutMs);
     foot1.config_kD(0, 0, kTimeoutMs);

     /* set acceleration and vcruise velocity - see documentation */
     foot1.configMotionCruiseVelocity(200, kTimeoutMs);
     foot1.configMotionAcceleration(200, kTimeoutMs);

     /* zero the sensor */
     // for an absolute sensor this will not actually be zero, but the current location
     foot1.setSelectedSensorPosition(0, kPIDLoopIdx, kTimeoutMs);
    


     //Use these settings to turn on/off software limits and set the limits
     foot1.configForwardSoftLimitEnable(false);
     foot1.configForwardSoftLimitThreshold(forwardLimit);

     foot1.configReverseSoftLimitEnable(false);
     foot1.configReverseSoftLimitThreshold(reverseLimit);
    
     foot1.configReverseLimitSwitchSource(LimitSwitchSource.FeedbackConnector,
                                        LimitSwitchNormal.NormallyOpen,
                                        kTimeoutMs);
    
    
    }

    //moved this function to ManualJumpCommand so it would not mess with motion magic
    /*
    @Override
    public void periodic() {
        if(!used)
        {
        foot1.set(ControlMode.PercentOutput, .15);
        
        }
        else
        {
            foot1.set(ControlMode.PercentOutput,0);
        }// Put code here to be run every loop

    }
    */

    public void jump()
    {
        foot1.set(ControlMode.PercentOutput, -.6);
        used = true; //we might be able to tie this to the reverse limit switch to work better even if jump is accidently pressed
        // havent tested this
    }

    public void stop()
    {
        foot1.set(ControlMode.PercentOutput, 0);
        //this should stop it
    }


    public void manualJump(double power)
    {
        foot1.set(ControlMode.PercentOutput, power);
    }

    public void motionMagicJump()
    {
        foot1.set(ControlMode.MotionMagic, targetPosition);
    }

    public int getTargetPosition()
    {
        return targetPosition;
    }

    public void setTargetPosition(int position)
    {
        targetPosition=position;
    }

    public int getFootPosition() {
        return foot1.getSelectedSensorPosition(0);

    
    }

    public void zeroSensor(){
        foot1.setSelectedSensorPosition(0, kPIDLoopIdx, kTimeoutMs);
        
    
    }

    public void setPercentOut(){
        foot1.set(ControlMode.PercentOutput,0);
    }


    public boolean isReverseLimit(){
        return foot1.getSensorCollection().isRevLimitSwitchClosed();
    }

    public boolean isUsed(){
        return used;
    }

    public void setUsed(boolean value){
        used = value;
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

