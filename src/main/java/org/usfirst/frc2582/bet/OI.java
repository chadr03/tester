// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2582.bet;



import org.usfirst.frc2582.bet.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc2582.bet.subsystems.*;
import org.usfirst.frc2582.bet.triggers.DoubleButton;
import org.usfirst.frc2582.bet.triggers.ExampleButton;
import org.usfirst.frc2582.bet.triggers.NegaButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joy;
    public Joystick gamepad;

    /*
    public JoystickButton button1;
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button6;
    public JoystickButton button7;
    public JoystickButton button8;
    */

    public JoystickButton snap;
    
    public JoystickButton aButton;
    public JoystickButton bButton;
    public JoystickButton xButton;
    public JoystickButton yButton;
    
    public JoystickButton lbButton;
    public JoystickButton rbButton;
    public JoystickButton backButton;

 
    public NegaButton lb_NegaButton;
    public ExampleButton a_onlyButton;
    public ExampleButton b_onlyButton;
    public ExampleButton x_onlyButton;
    public ExampleButton y_onlyButton;
    public ExampleButton lb_aButton;
    public ExampleButton lb_bButton;
    public ExampleButton lb_xButton;
    public ExampleButton lb_yButton;

    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad = new Joystick(1);
        

        joy = new Joystick(0);

        //Set up buttons
        aButton = new JoystickButton(gamepad, XBControlMap.A);
        bButton = new JoystickButton(gamepad, XBControlMap.B);
        xButton = new JoystickButton(gamepad, XBControlMap.X);
        yButton = new JoystickButton(gamepad, XBControlMap.Y);

        lbButton = new JoystickButton(gamepad, XBControlMap.LB);
        lb_NegaButton = new NegaButton(lbButton);

        rbButton = new JoystickButton(gamepad, XBControlMap.RB);
        backButton = new JoystickButton(gamepad, XBControlMap.LOGO_LEFT);


        //These allow the double button to bu used without activatin the comand for both buttons
        a_onlyButton = new ExampleButton(lb_NegaButton, aButton);
        b_onlyButton = new ExampleButton(lb_NegaButton, bButton);
        x_onlyButton = new ExampleButton(lb_NegaButton, xButton);
        y_onlyButton = new ExampleButton(lb_NegaButton, yButton);

        lb_aButton =new ExampleButton(lbButton, aButton);
        lb_bButton = new ExampleButton(lbButton, bButton);
        lb_xButton = new ExampleButton(lbButton, xButton);
        lb_yButton = new ExampleButton(lbButton, yButton);


        //MODIFIED GAMEPAD TO ADD MORE FEATURES
        //see commented section for old setup
        //Hatch controls are default cargo controls are when LB is held

        //Hatch Controls
        a_onlyButton.whenPressed(new down()); //puts down arrow

        b_onlyButton.whenPressed(new up()); //puts up arrow

        x_onlyButton.whileHeld(new push()); //pushes off hatch
        

 

        //Cargo buttons must hold LB and Button to work
        lb_aButton.whileActive(new intake()); //intakes cargo

        lb_bButton.whileActive(new outtake()); //outakes cargo

        lb_xButton.whenActive(new TongueOutCommand()); //puts out tongue

        lb_yButton.whenActive(new TongueInCommand());


        //Foot Controls
        rbButton.whileHeld(new jump()); //jump
        backButton.whenPressed(new ResetFootUsedCommand());







        /***** MODIFIED JOYSTICKS 
        button1 = new JoystickButton(gamepad, 1); //A button
        button1.whenPressed(new down());
        
        button2 = new JoystickButton(gamepad, 2); //B button
        button2.whenPressed(new up());

        button3 = new JoystickButton(gamepad, 3);  //X button
        button3.whileHeld(new push());

        button4 = new JoystickButton(gamepad, 4);  //Y button
        button4.whileHeld(new intake());
    
        button5 = new JoystickButton(gamepad, 5);  //LB button
        button5.whileHeld(new outtake());

        button6 = new JoystickButton(gamepad, 6);  //RB button
        button6.whileHeld(new jump());

        button7 = new JoystickButton(gamepad, 7);  //logo left button
        button7.whenPressed(new AutoShoot());

        button8 = new JoystickButton(gamepad, 8);  //logo right button
        button8.whenPressed(new AutoBox());
        //button8.cancelWhenActive(new AutoBox());
        */


        snap = new JoystickButton(joy, 1);
        snap.whileHeld(new SnapAndLock());

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("joydrive", new joydrive());
        SmartDashboard.putData("intake", new intake());
        SmartDashboard.putData("outtake", new outtake());
        SmartDashboard.putData("jump", new jump());
        SmartDashboard.putData("push", new push());
        SmartDashboard.putData("up", new up());
        SmartDashboard.putData("down", new down());
        SmartDashboard.putData("auto", new AutoBox());
        //SmartDashboard.putData("zero foot", new ZeroFootCommand());
        //SmartDashboard.putData("motion magic jump", new MotionMagicClimbCommand());
        //SmartDashboard.putData("tongue out", new TongueOutCommand());
        //SmartDashboard.putData("tongue in", new TongueInCommand());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoy() {
        return joy;
    }

    public Joystick getgamepad() {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

